import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() {
  runApp(formcaixa());
}

class formcaixa extends StatefulWidget {
  @override
  _formcaixaState createState() => _formcaixaState();
}

class _formcaixaState extends State<formcaixa> {
  final _formKey = GlobalKey<FormState>();
  final _dados = <String, dynamic>{};
  final _baController = TextEditingController();
  final _baComumController = TextEditingController();
  final _ufController = TextEditingController();
  final _localidadeController = TextEditingController();
  final _estacaoController = TextEditingController();
  final _enderecoController = TextEditingController();
  final _celulaController = TextEditingController();
  final _cdoeController = TextEditingController();
  final _dataAberturaController = TextEditingController();
  final _dataVencimentoController = TextEditingController();
  final _tipoController = TextEditingController();
  final _idUsuController = TextEditingController();
  final _dataDespachoController = TextEditingController();
  final _statusController = TextEditingController();
  final _obsController = TextEditingController();
  final _justParalizacaoController = TextEditingController();

  @override
  void initState() {
    super.initState();
    preencherFormulario(); // Preencher o formulário quando a tela for carregada
  }

  @override
  void dispose() {
    _baController.dispose();
    _baComumController.dispose();
    _ufController.dispose();
    _localidadeController.dispose();
    _estacaoController.dispose();
    _enderecoController.dispose();
    _celulaController.dispose();
    _cdoeController.dispose();
    _dataAberturaController.dispose();
    _dataVencimentoController.dispose();
    _tipoController.dispose();
    _idUsuController.dispose();
    _dataDespachoController.dispose();
    _statusController.dispose();
    _obsController.dispose();
    _justParalizacaoController.dispose();
    super.dispose();
  }

  void limparFormulario() {
    _formKey.currentState!.reset();
    _baController.clear();
    _baComumController.clear();
    _ufController.clear();
    _localidadeController.clear();
    _estacaoController.clear();
    _enderecoController.clear();
    _celulaController.clear();
    _cdoeController.clear();
    _dataAberturaController.clear();
    _dataVencimentoController.clear();
    _tipoController.clear();
    _idUsuController.clear();
    _dataDespachoController.clear();
    _statusController.clear();
    _obsController.clear();
    _justParalizacaoController.clear();
  }

  Future<void> preencherFormulario() async {
    // Fazer uma solicitação HTTP para obter os dados do banco de dados
    var response = await http.get(Uri.parse(
        'https://srv726-files.hstgr.io/3c88542be31f6438/files/public_html/move/conn.php'));

    if (response.statusCode == 200) {
      // Converter a resposta para JSON
      var data = jsonDecode(response.body);

      // Preencher os controladores de texto com os valores obtidos
      setState(() {
        _baController.text = data['ba'];
        _baComumController.text = data['ba_comum'];
        _ufController.text = data['uf'];
        _localidadeController.text = data['localidade'];
        _estacaoController.text = data['estacao'];
        _enderecoController.text = data['endereco'];
        _celulaController.text = data['celula'];
        _cdoeController.text = data['cdoe'];
        _dataAberturaController.text = data['data_abertura'];
        _dataVencimentoController.text = data['data_vencimento'];
        _tipoController.text = data['tipo'];
        _idUsuController.text = data['id_usuario'];
        _dataDespachoController.text = data['data_despacho'];
        _statusController.text = data['status'];
        _obsController.text = data['observacao'];
        _justParalizacaoController.text = data['justificativa_paralizacao'];
      });
    } else {
      // Se a solicitação falhar, exibir uma mensagem de erro
      showDialog(
        context: context,
        builder: (BuildContext context) {
          return AlertDialog(
            title: Text('Erro'),
            content: Text('Falha ao obter os dados do banco de dados.'),
            actions: [
              TextButton(
                child: Text('OK'),
                onPressed: () {
                  Navigator.of(context).pop();
                },
              ),
            ],
          );
        },
      );
    }
  }

  Future<void> enviarFormulario() async {
    if (_formKey.currentState!.validate()) {
      // Enviar o formulário para o servidor
      var response = await http.post(
        Uri.parse('URL_DO_SERVIDOR'),
        body: jsonEncode(_dados),
      );

      if (response.statusCode == 200) {
        // Se a solicitação for bem-sucedida, exibir uma mensagem de sucesso
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: Text('Sucesso'),
              content: Text('Formulário enviado com sucesso.'),
              actions: [
                TextButton(
                  child: Text('OK'),
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                ),
              ],
            );
          },
        );

        // Limpar o formulário após o envio
        limparFormulario();
      } else {
        // Se a solicitação falhar, exibir uma mensagem de erro
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              title: Text('Erro'),
              content: Text('Falha ao enviar o formulário.'),
              actions: [
                TextButton(
                  child: Text('OK'),
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                ),
              ],
            );
          },
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Formulário Caixa'),
        ),
        body: SingleChildScrollView(
          child: Padding(
            padding: EdgeInsets.all(16.0),
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Campos de texto e outros widgets do formulário
                  // ...
                  
                  ElevatedButton(
                    onPressed: preencherFormulario,
                    child: Text('Preencher Formulário'),
                  ),

                  ElevatedButton(
                    onPressed: enviarFormulario,
                    child: Text('Enviar Formulário'),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
